{"version":3,"sources":["phonebook/Contacts/ContactForm.jsx","phonebook/Contacts/ContactList.jsx","phonebook/Filter/Filter.jsx","App.js","hooks/useLocalStorage.js","reportWebVitals.js","index.js","phonebook/Contacts/ContactStyles.module.css","phonebook/Filter/Filter.module.css","App.module.css"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","idF1","uuidv4","idF2","handleChange","e","target","value","className","s","form","preventDefault","label","htmlFor","id","inputName","type","pattern","title","required","onChange","inputTel","btn","ContactList","contacts","deleteContact","contactsList","map","contact","contactsListItem","onClick","delBtn","Filter","idF","filter","filterInput","App","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","setFilter","availableContact","find","newContact","alert","currentTarget","newContacts","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"kRAoFeA,MAhFf,YAAoC,IAAbC,EAAY,EAAZA,SACnB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAOC,cACPC,EAAOD,cASPE,EAAe,SAAAC,GACjB,MAAwBA,EAAEC,OAAlBT,EAAR,EAAQA,KAAMU,EAAd,EAAcA,MAEd,OAAQV,GACJ,IAAK,OACDC,EAAQS,GACR,MAEJ,IAAK,SACDP,EAAUO,GACV,MAEJ,QACI,SAahB,OACA,mCACY,uBAAMC,UAAWC,IAAEC,KAAMf,SAXX,SAAAU,GACjBA,EAAEM,iBAIHhB,EAASE,EAAME,GA5BfD,EAAQ,IACRE,EAAU,KAiCN,UACI,uBAAOQ,UAAWC,IAAEG,MAAOC,QAASZ,EAApC,kBACI,uBACAa,GAAIb,EACJO,UAAWC,IAAEM,UACbC,KAAK,OACLnB,KAAK,OACLoB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUhB,EACVG,MAAOV,IAGP,uBAAOW,UAAWC,IAAEG,MAAOC,QAASV,EAApC,oBACA,uBACAW,GAAIX,EACJK,UAAWC,IAAEY,SACbL,KAAK,MACLnB,KAAK,SACLoB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SAAUhB,EACVG,MAAOR,IAGX,wBACIS,UAAWC,IAAEa,IACbN,KAAK,SAFT,+BCjDDO,MArBf,YAAoD,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,cAC1B,OACI,mCACI,oBAAIjB,UAAWC,IAAEiB,aAAjB,SACKF,EAASG,KAAI,SAAAC,GAAO,OACjB,qBAEIpB,UAAWC,IAAEoB,iBAFjB,cAGGD,EAAQ/B,KAHX,KAGmB+B,EAAQ7B,OAEvB,sBACI+B,QAAS,kBAAML,EAAcG,EAAQd,KACrCN,UAAWC,IAAEsB,OAFjB,iBAJKH,EAAQd,Y,gBCiB1BkB,MAtBf,YAAuC,IAApBZ,EAAmB,EAAnBA,SAAUb,EAAS,EAATA,MACf0B,EAAM/B,cAEZ,OACI,qCACI,uBACIW,QAASoB,EACTzB,UAAWC,IAAEyB,OAFjB,mCAKA,uBACIpB,GAAImB,EACJzB,UAAWC,IAAE0B,YACbnB,KAAK,OACLnB,KAAK,SACLU,MAAOA,EACPa,SAAUA,Q,gBC4CfgB,MAxDf,WACE,MCPa,SAA0BC,EAAKC,GAC5C,MAA0B1C,oBAAS,WAAO,IAAD,EACvC,iBAAO2C,KAAKC,MAAMC,OAAOC,aAAaC,QAAQN,WAA9C,QAAuDC,KADzD,mBAAOM,EAAP,KAAcC,EAAd,KAQA,OAJAC,qBAAU,WACRL,OAAOC,aAAaK,QAAQV,EAAKE,KAAKS,UAAUJ,MAC/C,CAACP,EAAKO,IAEF,CAACA,EAAOC,GDFiBI,CAAgB,WAAY,IAA5D,mBAAOzB,EAAP,KAAiB0B,EAAjB,KACA,EAA4BtD,mBAAS,IAArC,mBAAOsC,EAAP,KAAeiB,EAAf,KAgCE,OACE,qCACE,oBAAI3C,UAAWC,IAAES,MAAjB,uBAEA,cAAC,EAAD,CACEvB,SAlCa,SAACE,EAAME,GAC1B,IAAMqD,EAAmB5B,EAAS6B,MAAK,SAAAzB,GAAO,OAAKA,EAAQ/B,OAASA,KAC9DyD,EAAa,CAAExC,GAAIZ,cAAUL,KAAMA,EAAME,OAAQA,GAEvD,OAAIqD,EACKG,MAAM,GAAD,OAAI1D,EAAJ,6BAGPqD,EAAY,CAACI,GAAF,mBAAiB9B,QA4B/B,oBAAIhB,UAAWC,IAAES,MAAjB,sBAEA,cAAC,EAAD,CACEE,SA3BmB,SAAAf,GACzB,IAAQE,EAAUF,EAAEmD,cAAZjD,MAER4C,EAAU5C,IAyBJA,MAAO2B,IAGT,cAAC,EAAD,CACET,cAtBmB,SAACX,GAC1B,IAAM2C,EAAcjC,EAASU,QAAO,SAACN,GAAD,OAAaA,EAAQd,KAAOA,KAEhE,OAAOoC,EAAYO,IAoBbjC,SA1BCA,EAASU,QAAO,SAACN,GAAD,OAAaA,EAAQ/B,KAAK6D,cAAcC,SAASzB,EAAOwB,wBEpBpEE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,KAAO,4BAA4B,MAAQ,6BAA6B,UAAY,iCAAiC,SAAW,gCAAgC,IAAM,2BAA2B,OAAS,8BAA8B,aAAe,oCAAoC,iBAAmB,0C,kBCAhUD,EAAOC,QAAU,CAAC,OAAS,yB,kBCA3BD,EAAOC,QAAU,CAAC,MAAQ,sB","file":"static/js/main.32084f98.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport s from './ContactStyles.module.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction ContactForm({ onSubmit }) {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const idF1 = uuidv4();\r\n    const idF2 = uuidv4();\r\n\r\n    const clearState = () => {\r\n        setName('');\r\n        setNumber('');\r\n\r\n        return;\r\n    }\r\n\r\n    const handleChange = e => {\r\n        const { name, value } = e.target;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            \r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            \r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n     const handleSubmit = e => {\r\n         e.preventDefault();\r\n         \r\n       \r\n\r\n        onSubmit(name, number);\r\n        clearState();\r\n    }\r\n\r\nreturn ( \r\n<>\r\n            <form className={s.form} onSubmit={handleSubmit}>\r\n                <label className={s.label} htmlFor={idF1}>Name</label>\r\n                    <input\r\n                    id={idF1}\r\n                    className={s.inputName}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    onChange={handleChange}\r\n                    value={name}\r\n                    />\r\n\r\n                    <label className={s.label} htmlFor={idF2}>Number</label>\r\n                    <input\r\n                    id={idF2}\r\n                    className={s.inputTel}\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    onChange={handleChange}\r\n                    value={number}\r\n                />\r\n\r\n                <button\r\n                    className={s.btn}\r\n                    type=\"submit\"\r\n                >\r\n                    Add contact\r\n                </button>\r\n                </form>\r\n</>\r\n        );\r\n}\r\n\r\nexport default ContactForm;","import React from 'react';\r\nimport s from './ContactStyles.module.css';\r\n\r\nfunction ContactList ({ contacts, deleteContact }) {\r\n        return (\r\n            <>\r\n                <ul className={s.contactsList}>\r\n                    {contacts.map(contact => (\r\n                        <li\r\n                            key={contact.id}\r\n                            className={s.contactsListItem}\r\n                        > {contact.name}: {contact.number}\r\n\r\n                            <span\r\n                                onClick={() => deleteContact(contact.id)}\r\n                                className={s.delBtn}\r\n                            >-</span>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </>\r\n        );\r\n    }\r\n\r\nexport default ContactList;","import React from 'react';\r\nimport s from './Filter.module.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction Filter ({ onChange, value }) {\r\n        const idF = uuidv4();\r\n\r\n        return (\r\n            <>\r\n                <label\r\n                    htmlFor={idF}\r\n                    className={s.filter}\r\n                >Find contacts by name\r\n                </label>\r\n                <input\r\n                    id={idF}\r\n                    className={s.filterInput}\r\n                    type='text'\r\n                    name='filter'\r\n                    value={value}\r\n                    onChange={onChange}\r\n                />\r\n             </>\r\n        );\r\n    }\r\n\r\nexport default Filter;","import { useState } from 'react';\nimport ContactForm from './phonebook/Contacts/ContactForm';\nimport ContactList from './phonebook/Contacts/ContactList';\nimport Filter from './phonebook/Filter/Filter';\nimport { v4 as uuidv4 } from 'uuid';\nimport s from './App.module.css';\nimport useLocalStorage from './hooks/useLocalStorage';\n\nfunction App () {\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n  const [filter, setFilter] = useState('');\n  \n  \n  const handleSubmit = (name, number) => {\n    const availableContact = contacts.find(contact =>  contact.name === name)\n    const newContact = { id: uuidv4(), name: name, number: number }\n\n    if (availableContact) {\n      return alert(`${name} is already in contacts.`);\n    }\n\n    return setContacts([newContact, ...contacts])\n  }\n\n\n  const handleFilterChange = e => {\n    const { value } = e.currentTarget;\n\n    setFilter(value);\n  }\n\n  const filterContactsList = () => {\n    return contacts.filter((contact) => contact.name.toLowerCase().includes(filter.toLowerCase()));\n  }\n\n  const deleteNameFromList = (id) => {\n    const newContacts = contacts.filter((contact) => contact.id !== id);\n        \n    return setContacts(newContacts)\n  }\n\n  \n    return (\n      <>\n        <h1 className={s.title}>Phonebook</h1>\n\n        <ContactForm\n          onSubmit={handleSubmit} />\n        \n        <h2 className={s.title}>Contacts</h2>\n\n        <Filter\n          onChange={handleFilterChange}\n          value={filter}\n        />\n        \n        <ContactList\n          deleteContact={deleteNameFromList}\n          contacts={filterContactsList()}\n        />\n      </>\n    )\n  };\n\nexport default App;\n","import { useState, useEffect } from 'react';\r\n\r\nexport default function useLocalStorage (key, defaultValue) {\r\n  const [state, setState] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state))\r\n  }, [key, state])\r\n\r\n  return [state, setState];\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactStyles_form__jWo7d\",\"label\":\"ContactStyles_label__3PpM0\",\"inputName\":\"ContactStyles_inputName__2tK3I\",\"inputTel\":\"ContactStyles_inputTel__YCgIq\",\"btn\":\"ContactStyles_btn__1bysH\",\"delBtn\":\"ContactStyles_delBtn__-f5Zv\",\"contactsList\":\"ContactStyles_contactsList__1vvyk\",\"contactsListItem\":\"ContactStyles_contactsListItem__18ehv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1fXFk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__14HYv\"};"],"sourceRoot":""}